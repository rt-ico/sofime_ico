#! /bin/sh

# Template Linux service script for REFLEXE ViewShell
# You must install JSVC before use (sudo apt-get install jsvc)
# Usage:
# - Define the_service_name (by convention, 'vsh'+'application name')
# - Define the_service_description
# - Define the data directory $SVCDIR (by default ~/$NAME)
# - Define the non-root user for running the service $RUN_USER
# - Verify that the host application is correctly installed in $VIEWSHELL
# - Copy this file $NAME into /etc/init.d/ (as root:root)
#   chown root:root /etc/init.d/the_service_name
# - Make the file executable:
#   chmod 755 /etc/init.d/the_service_name
# - Ensure automatic startup:
#   update.rc-d the_service_name defaults
# - Remove automatic startup (if required):
#   update.rc-d -f the_service_name remove
# - Control the service (start/stop/restart):
#   /etc/init.d/the_service_name (start|stop|restart)

### BEGIN INIT INFO
# Provides:          the_service_name
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      postgresql mysql
# Should-Stop:       postgresql mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Controls ViewShell service.
# Description:       Controls ViewShell service.
### END INIT INFO

DESC="the_service_description"
NAME=the_service_name
LOGNAME=/var/log/$NAME.log
RUN_USER=reflexe
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
SVCDIR=/home/$RUN_USER/$NAME
VIEWSHELL=/opt/viewshell/viewshell.jar
JSVC=/usr/bin/jsvc
WAIT_FOR_START=10
FD_LIMIT=100000
VERBOSE="yes"
#JAVA_HOME=/usr/lib/jdk1.8.0_121

# The first existing directory is used for JAVA_HOME if needed.
JVM_SEARCH_DIRS="/usr/lib/jvm/java-8-openjdk /usr/lib/jvm/java-8-oracle"

# If JAVA_HOME has not been set, try to determine it.
if [ -z "$JAVA_HOME" ]; then
    # If java is in PATH, use a JAVA_HOME that corresponds to that. This is
    # both consistent with how the upstream startup script works, and how
    # Debian works (read: the use of alternatives to set a system JVM).
    if [ -n "`which java`" ]; then
        java=`which java`
        # Dereference symlink(s)
        while true; do
            if [ -h "$java" ]; then
                java=`readlink "$java"`
                continue
            fi
            break
        done
        JAVA_HOME="`dirname $java`/../"
    # No JAVA_HOME set and no java found in PATH, search for a JVM.
    else
        for jdir in $JVM_SEARCH_DIRS; do
            if [ -x "$jdir/bin/java" ]; then
                JAVA_HOME="$jdir"
                break
            fi
        done
    fi
fi
JAVA="$JAVA_HOME/bin/java"
JSVC_VERSION=`jsvc -home $JAVA_HOME -help | grep 'jsvc (Apache Commons Daemon)'`

. /lib/lsb/init-functions

#
# Function that returns 0 if process is running, or nonzero if not.
#
# The nonzero value is 3 if the process is simply not running, and 1 if the
# process is not running but the pidfile exists (to match the exit codes for
# the "status" command; see LSB core spec 3.1, section 20.2)
#
CMD_PATT="$NAME"
is_running()
{
    if [ -f $PIDFILE ]; then
        pid=`cat $PIDFILE`
        grep -Eq "$CMD_PATT" "/proc/$pid/cmdline" 2>/dev/null && return 0
        return 1
    fi
    return 3
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    is_running && return 1

    echo $JSVC_VERSION >> $LOGNAME

    ulimit -l unlimited
    ulimit -n "$FD_LIMIT"

    cd $SVCDIR    # jsvc doesn't chdir() for us

    $JSVC \
        -user $RUN_USER \
        -home $JAVA_HOME \
        -pidfile $PIDFILE \
        -errfile $LOGNAME.log \
        -outfile $LOGNAME.log \
        -DVSH_HOME=$SVCDIR \
        -XX:+UseG1GC \
        -XX:+UseStringDeduplication \
        -Xloggc:$SVCDIR/logs/garbage.log \
        -XX:+PrintGCTimeStamps \
        -XX:+UseGCLogFileRotation \
        -XX:NumberOfGCLogFiles=8 \
        -XX:GCLogFileSize=256K \
        -cwd $SVCDIR \
        -cp $VIEWSHELL \
        viewshell.application.UnixDaemon

    is_running && return 0
    for tries in `seq $WAIT_FOR_START`; do
        sleep 2
        is_running && return 0
    done
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    is_running || return 1
    $JSVC -stop -home $JAVA_HOME -pidfile $PIDFILE \
            viewshell.application.UnixDaemon
    is_running && return 2 || return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
    is_running
    stat=$?
    case "$stat" in
      0) log_success_msg "$DESC is running" ;;
      1) log_failure_msg "could not access pidfile for $DESC" ;;
      *) log_success_msg "$DESC is not running" ;;
    esac
    exit "$stat"
    ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
	exit 3
	;;
esac

:

# vi:ai sw=4 ts=4 tw=0 et
